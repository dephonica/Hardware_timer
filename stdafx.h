#include <iostm8s105k4.h>
#include <string.h>

typedef unsigned char   uint8_t;
typedef unsigned short  uint16_t;

// Константа счётчика сторожевого таймера
const unsigned char __wwdg_counter = 0x7f;

/////////////////////////////////////////////////////////////////////////////
// Настройки семисегментного индикатора
//
//         AAAA
//        F    B
//        F    B
//         GGGG
//        E    C
//        E    C
//         DDDD
//
// Настройка соответствия выводов порта сегментам индикатора
// Сегменты в массиве __display_pinmap в порядке возрастания A-G
const uint8_t __display_pinmap[7] = {5,7,2,3,4,6,1};

// Буква порта, к которому подключены сегменты дисплея
const char __display_segport = 'C';

// Настройка соответствия выводов порта разрядам дисплея
const uint8_t __display_compins[6] = {'B',1, 'E',5, 'B',0};

// Настройка типа дисплея - общий катод (true), общий анод (false)
const bool __display_common_catodes = false;

// Период обновления дисплея, мсек
const int __display_refresh = 5;

// Период мерцания символа, 
const int __display_blink = 300;

/////////////////////////////////////////////////////////////////////////////
// Настройки драйвера светодиодов
//

// Буква порта общего вывода светодиодов
const char __leds_comport = 'B';

// Номер общего вывода светодиодов
const char __leds_compin = 5;

// Порты и выводы назначенные светодиодам
const char __leds_ledmap[] = {'B',2, 'B',3, 'B',4};

// Период ШИМ светодиодов, мсек.
const int __leds_refresh = 3;

// Основной период мигания светодиода, мсек.
const int __leds_blink = 150;

/////////////////////////////////////////////////////////////////////////////
// Настройки драйвера клавиатуры
//

// Настройка соответствия портов и выводов
const uint8_t __keys_keymap[] = {'A',1, 'A',2};

// Активный уровень на пине (при нажатой клавише)
bool __keys_active_state = false;

// Время ожидания повторения символа при удержании нажатой клавиши, мсек.
const int __keys_repeat_wait = 500;

// Период повторения символа, мсек.
const int __keys_repeat_time = 50;

// Назначение индексов клавиш вверх и вниз
const uint8_t __keys_keyup = 0;
const uint8_t __keys_keydown = 1;

/////////////////////////////////////////////////////////////////////////////
// Настройки драйвера датчиков
//

// Версия драйвера датчиков
#define INPUTS_DETECTOR_VERSION     2

// Порты и контакты датчиков
const uint8_t __inp_map[] = {'D',0, 'D',1, 'D',2};

// Период опроса входов датчиков, мсек.
const int __in_read_period = 3;

// V1. Время интегрирования входов датчиков, мсек.
// V2. Дискретность преобразования состояния датчиков, мсек.
const int __in_ref_period = 100;

// V1. Срабатываний за время интегрирования для определения входа как активного
// V2. Порог срабатывания входа как активного.
uint16_t __in_count_active = 1000;

// V1. Не используется
// V2. Порог срабатывания входа как не активного
uint16_t __in_count_inactive = 100;

// V1. Не используется
// V2. Дельта верхнего предела счётчика-детектора
const uint16_t __in_count_upper_delta = 5;

/////////////////////////////////////////////////////////////////////////////
// Настройки драйвера реле
//

// Порты и контакты реле
const uint8_t __rel_map[] = {'D',3, 'D',4, 'D',5, 'D',6, 'D',7};

// Уровень сигнала включающий реле
bool __rel_on_state = true;

const uint8_t __rel1_o = 0;
const uint8_t __rel2_z = 1;
const uint8_t __rel_v1 = 2;
const uint8_t __rel_v2 = 3;
const uint8_t __rel_v3 = 4;

/////////////////////////////////////////////////////////////////////////////
// Настройки интерфейса
//

// Время нажатия на две клавиши для входа в режим конфигурирования, мсек
const int __menu_press_time = 900;

// Время нажатия на клавишу "вверх" для входа в режим системных настроек, мсек
const int __adv_menu_press_time = 15000;

// Время, через которое отключается режим конфигурирования без нажатия
// на клавиши, мсек
const int __menu_wait_time = 5000;

/////////////////////////////////////////////////////////////////////////////
#include "util.cpp"
#include "gpio.cpp"
#include "timer.cpp"
#include "keys.cpp"
#include "leds.cpp"
#include "display.cpp"
#include "eeprom.cpp"
#include "watchdog.cpp"

#if (INPUTS_DETECTOR_VERSION == 1)
    #include "inputs.cpp"
#else
    #include "inputs2.cpp"
#endif

#include "relay.cpp"
#include "body.cpp"
#include "init.cpp"
